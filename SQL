# Язык управления данными (Data Manipulation Language, DML)
# Состоит из следующих команд:
# − SELECT Запросы на выборку считывает данные,
# удовлетворяющие заданным условиям,
# − INSERT добавляет новые данные,
# − UPDATE изменяет существующие данные,
# − DELETE – удаляет данные.
 USE study_database;

SELECT * FROM categories;

SELECT product, price FROM products;
 # AS
SELECT product AS Товар,
price AS `Отпускная цена` FROM products;
 SELECT product, price, price*0.9 AS action_price
FROM products;
 SELECT product, price, price*0.9 AS action_price,
 (price - action_price) AS discount
FROM products;
 SELECT product,
price,
price*0.9 AS action_price,
price*0.1 AS discount
FROM products;
 SELECT category, description FROM categories;
 SELECT category, description FROM categories ORDER BY category ASC;
 SELECT * FROM products ORDER BY category_id ASC, product DESC;
 SELECT * FROM products ORDER BY brand_id, category_id;
 SELECT product, price*0.9 AS action_price FROM products ORDER BY action_price DESC;
 SELECT category_id, brand_id FROM products;
 SELECT ALL category_id, brand_id FROM products;
 SELECT DISTINCT category_id, brand_id FROM products;
 # TOP (LIMIT)
# список трех самых дорогих товаров:
SELECT TOP 3 product, price FROM products ORDER BY price DESC;
 SELECT product, price FROM products ORDER BY price DESC LIMIT 3;
 SELECT * FROM brands; # id Acer - ?
 SELECT * FROM products WHERE brand_id= ;
 SELECT * FROM categories; # id Motherboard, id Monitors - ?
 # Acer and Motherboards
SELECT * FROM products WHERE brand_id=3 AND category_id=1;
 # Acer and Motherboards and Monitors
SELECT * FROM products WHERE brand_id=3 AND category_id=1 AND category_id=2;
 SELECT * FROM products WHERE brand_id=3 AND (category_id=1 OR category_id=2);
 SELECT * FROM products WHERE brand_id=3 AND category_id IN(1, 2);
 SELECT * FROM products WHERE brand_id IS NULL;
 SELECT * FROM products WHERE brand_id IS NOT NULL;
 # Отбор по части строки
SELECT * FROM categories WHERE category like 'Mo%';
 # Условия отбора <, >, >=, =<, != (<>)
SELECT * FROM products WHERE price >200;
 # Отбор данных по диапазону:
SELECT * FROM products WHERE price between 150 and 200;
 SELECT
 products.*,
    brands.*
FROM products, brands;
 SELECT
 products.id,
    products.product,
    products.price,
    brands.brand
FROM products, brands
WHERE brands.id = products.brand_id;
 SELECT
 products.id,
    products.product,
    products.price,
    brands.brand
FROM products INNER JOIN brands ON brands.id = products.brand_id;
 SELECT
 products.id,
 products.product,
 categories.category,
 brands.brand,
 products.price
FROM
 products INNER JOIN
    categories ON products.category_id = categories.id INNER JOIN
    brands ON products.brand_id=brands.id
ORDER BY brands.brand;
 SELECT A.id, A.product, A.price, B.brand
FROM
 products AS A INNER JOIN
    brands AS B ON A.brand_id = B.id;
 # RECURSIVE REFERENCE
SELECT
 Chiefs.Name,
 Chiefs.State,
 Submitive.Name,
 Submitive.State
FROM tblEmployers AS Chiefs INNER JOIN tblEmployers AS Submitive ON Chiefs.ID = Submitive.IDChief
WHERE Chiefs.Name='Иванов' OR 'Петров';
 SELECT
 products.id,
    products.product,
    products.price,
    brands.brand
FROM
 products INNER JOIN
    brands ON brands.id = products.brand_id
ORDER BY brands.brand;
 SELECT Sum(qty) FROM actions;
 SELECT Sum(qty*price) FROM actions;
 SELECT
 supplier_id,
    Sum(qty*price) AS TotSum
    FROM actions
GROUP BY supplier_id;
 SELECT
 actions.supplier_id,
    suppliers.supplier,
    Sum(qty*price) AS Tot
FROM
 actions INNER JOIN
    suppliers ON actions.supplier_id = suppliers.id
GROUP BY actions.supplier_id, suppliers.supplier; # !suppliers.supplier
 SELECT * FROM (SELECT
 actions.supplier_id,
    suppliers.supplier,
    Sum(qty*price) AS Tot
FROM
 actions INNER JOIN
    suppliers ON actions.supplier_id = suppliers.id
GROUP BY actions.supplier_id, suppliers.supplier) AS A
WHERE Tot > 30000;# !suppliers.supplier
 SELECT
 supplier_id,
    suppliers.supplier,
    Sum(qty*price) AS Tot
FROM
 actions INNER JOIN
 suppliers ON actions.supplier_id = suppliers.id
GROUP BY supplier_id, suppliers.supplier
HAVING Sum(qty*price) > 40000;

SELECT supplier_id,  suppliers.supplier,
    Sum(qty*price) AS Tot
FROM
 actions INNER JOIN
 suppliers ON actions.supplier_id = suppliers.id
WHERE actions.product_id = 10
GROUP BY supplier_id, suppliers.supplier
HAVING Sum(qty*price) > 40000;
 # Статистические функции SQL (неполный перечень):
# − Функция Sum - Возвращает сумму набора значений, содержащихся в заданном поле запроса.
# − Функция Count - Вычисляет количество записей, возвращаемых запросом.
# − Функции Min, Max - Возвращают минимальное и максимальное значения из набора значений, содержащихся в указанном поле запроса.
# − Функция Avg - Вычисляет арифметическое среднее набора чисел, содержащихся в указанном поле запроса.
 # Добавление одной записи
INSERT INTO categories (category, description)
VALUES ('Smartphones', 'Сотовые телефоны');
 select * from categories;
 # Добавление нескольких записей
INSERT INTO tbl_name (field, field2, ...)
VALUES
 (value1_1, value1_2, ...),
    (value2_1, value2_2, ...)
    ...;
 # Конкатенация строк
SELECT CONCAT('First', ' ', 'Second') AS A;
 SELECT CONCAT('New ', category), description FROM categories;
 INSERT INTO categories (category, description)
SELECT CONCAT('New ', category), description FROM categories;
 SELECT * FROM categories;
 SELECT * FROM products WHERE brand_id IS NULL;
 UPDATE products
SET price = price * 1.1,
description = CONCAT ('обновление цен ', curdate(), '.', description)
WHERE brand_id IS NULL;
 SELECT * FROM cateories WHERE category LIKE '%New%';
 DELETE FROM categories WHERE category LIKE '%New%';
 SELECT * FROM categories WHERE category LIKE '%New%';
 SELECT * FROM categories;
